{"version":3,"file":"static/js/616.9d65f844.chunk.js","mappings":"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","sources":["../node_modules/clsx/dist/clsx.m.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/react-data-grid/src/style/cell.ts","../node_modules/react-data-grid/src/style/core.ts","../node_modules/react-data-grid/src/style/row.ts","../node_modules/react-data-grid/src/formatters/checkboxFormatter.tsx","../node_modules/react-data-grid/src/hooks/useLayoutEffect.ts","../node_modules/react-data-grid/src/hooks/useFocusRef.ts","../node_modules/react-data-grid/src/DataGridDefaultComponentsProvider.ts","../node_modules/react-data-grid/src/formatters/valueFormatter.tsx","../node_modules/react-data-grid/src/formatters/toggleGroupFormatter.tsx","../node_modules/react-data-grid/src/hooks/useRowSelection.ts","../node_modules/react-data-grid/src/Columns.tsx","../node_modules/react-data-grid/src/utils/colSpanUtils.ts","../node_modules/react-data-grid/src/utils/domUtils.ts","../node_modules/react-data-grid/src/utils/keyboardUtils.ts","../node_modules/react-data-grid/src/utils/renderMeasuringCells.tsx","../node_modules/react-data-grid/src/utils/selectedCellUtils.ts","../node_modules/react-data-grid/src/utils/styleUtils.ts","../node_modules/react-data-grid/src/utils/index.ts","../node_modules/react-data-grid/src/hooks/useLatestFunc.ts","../node_modules/react-data-grid/src/hooks/useRovingCellRef.ts","../node_modules/react-data-grid/src/hooks/useViewportRows.ts","../node_modules/react-data-grid/src/headerRenderer.tsx","../node_modules/react-data-grid/src/HeaderCell.tsx","../node_modules/react-data-grid/src/HeaderRow.tsx","../node_modules/react-data-grid/src/Cell.tsx","../node_modules/react-data-grid/src/Row.tsx","../node_modules/react-data-grid/src/GroupCell.tsx","../node_modules/react-data-grid/src/GroupRow.tsx","../node_modules/react-data-grid/src/SummaryCell.tsx","../node_modules/react-data-grid/src/SummaryRow.tsx","../node_modules/react-data-grid/src/EditCell.tsx","../node_modules/react-data-grid/src/DragHandle.tsx","../node_modules/react-data-grid/src/sortStatus.tsx","../node_modules/react-data-grid/src/DataGrid.tsx","../node_modules/react-data-grid/src/hooks/useGridDimensions.ts","../node_modules/react-data-grid/src/hooks/useCalculatedColumns.ts","../node_modules/react-data-grid/src/hooks/useViewportColumns.ts","../node_modules/react-data-grid/src/editors/textEditor.tsx"],"sourcesContent":["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}","import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /* max-content does not work with size containment\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\n     * Chromium bug: at odd zoom levels or subpixel positioning, layout/paint containment can make cell borders disappear\n     *   https://bugs.chromium.org/p/chromium/issues/detail?id=1326946\n     */\n    contain: style;\n    position: relative; /* needed for absolute positioning to work */\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: 1px solid var(--rdg-border-color);\n    border-block-end: 1px solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: 2px solid var(--rdg-selection-color);\n      outline-offset: -2px;\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  @layer rdg.Cell {\n    box-shadow: calc(2px * var(--rdg-sign)) 0 5px -2px rgba(136, 136, 136, 0.3);\n  }\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import { css } from '@linaria/core';\nimport { row } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  @layer rdg {\n    @layer Defaults,\n      FocusSink,\n      CheckboxInput,\n      CheckboxIcon,\n      CheckboxLabel,\n      Cell,\n      HeaderCell,\n      SummaryCell,\n      EditCell,\n      Row,\n      HeaderRow,\n      SummaryRow,\n      GroupedRow,\n      Root;\n\n    @layer Defaults {\n      *,\n      *::before,\n      *::after {\n        box-sizing: inherit;\n      }\n    }\n\n    @layer Root {\n      ${lightTheme}\n      --rdg-selection-color: #66afe9;\n      --rdg-font-size: 14px;\n\n      display: grid;\n\n      color-scheme: var(--rdg-color-scheme, light dark);\n\n      /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n      /* We set a stacking context so internal elements don't render on top of external elements. */\n      contain: strict;\n      content-visibility: auto;\n      block-size: 350px;\n      border: 1px solid var(--rdg-border-color);\n      box-sizing: border-box;\n      overflow: auto;\n      background-color: var(--rdg-background-color);\n      color: var(--rdg-color);\n      font-size: var(--rdg-font-size);\n\n      /* needed on Firefox */\n      &::before {\n        content: '';\n        grid-column: 1/-1;\n        grid-row: 1/-1;\n      }\n\n      &.rdg-dark {\n        --rdg-color-scheme: dark;\n        ${darkTheme}\n      }\n\n      &.rdg-light {\n        --rdg-color-scheme: light;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        &:not(.rdg-light) {\n          ${darkTheme}\n        }\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 2 to show up above header row */\n    z-index: 3;\n  }\n`;\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    line-height: var(--rdg-row-height);\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = 'rdg-row-selected';\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      height: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n","import clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport type { CheckboxFormatterProps } from '../types';\n\nconst checkboxLabel = css`\n  @layer rdg.CheckboxLabel {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    inset: 0;\n    margin-inline-end: 1px; /* align checkbox in row group cell */\n  }\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  @layer rdg.CheckboxInput {\n    all: unset;\n  }\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  @layer rdg.CheckboxIcon {\n    content: '';\n    inline-size: 20px;\n    block-size: 20px;\n    border: 2px solid var(--rdg-border-color);\n    background-color: var(--rdg-background-color);\n\n    .${checkboxInput}:checked + & {\n      background-color: var(--rdg-checkbox-color);\n      outline: 4px solid var(--rdg-background-color);\n      outline-offset: -6px;\n    }\n\n    .${checkboxInput}:focus + & {\n      border-color: var(--rdg-checkbox-focus-color);\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  @layer rdg.CheckboxLabel {\n    cursor: default;\n\n    .${checkbox} {\n      border-color: var(--rdg-checkbox-disabled-border-color);\n      background-color: var(--rdg-checkbox-disabled-background-color);\n    }\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nexport function checkboxFormatter(\n  { onChange, ...props }: CheckboxFormatterProps,\n  ref: React.RefObject<HTMLInputElement>\n) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label\n      className={clsx(checkboxLabelClassname, {\n        [checkboxLabelDisabledClassname]: props.disabled\n      })}\n    >\n      <input\n        type=\"checkbox\"\n        ref={ref}\n        {...props}\n        className={checkboxInputClassname}\n        onChange={handleChange}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isSelected: boolean) {\n  const ref = useRef<T>(null);\n\n  useLayoutEffect(() => {\n    if (!isSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  return {\n    ref,\n    tabIndex: isSelected ? 0 : -1\n  };\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Renderers, Maybe } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultComponentsContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport const DataGridDefaultComponentsProvider = DataGridDefaultComponentsContext.Provider;\n\nexport function useDefaultComponents<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultComponentsContext);\n}\n","import type { FormatterProps } from '../types';\n\nexport function valueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import { css } from '@linaria/core';\nimport type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst groupCellContent = css`\n  @layer rdg.GroupCellContent {\n    outline: none;\n  }\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  @layer rdg.GroupCellCaret {\n    margin-inline-start: 4px;\n    stroke: currentColor;\n    stroke-width: 1.5px;\n    fill: transparent;\n    vertical-align: middle;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function toggleGroupFormatter<R, SR>(props: GroupFormatterProps<R, SR>) {\n  return <ToggleGroup {...props} />;\n}\n\nexport function ToggleGroup<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={ref}\n      className={groupCellContentClassname}\n      tabIndex={tabIndex}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey as string}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import { createContext, useContext } from 'react';\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { SelectCellFormatter } from './formatters';\nimport { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, FormatterProps, GroupFormatterProps } from './types';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction SelectFormatter(props: FormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: GroupFormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        isCellSelected={props.isCellSelected}\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n      />\n    );\n  },\n  formatter(props) {\n    return <SelectFormatter {...props} />;\n  },\n  groupFormatter(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<HTMLDivElement>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return target.matches(\n      '.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child, .rdg-editor-container > div:only-child > label:only-child > :only-child'\n    );\n  }\n  return false;\n}\n","import { css } from '@linaria/core';\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>(viewportColumns: readonly CalculatedColumn<R, SR>[]) {\n  return (\n    <>\n      {viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n        <div\n          key={key}\n          className={measuringCellClassname}\n          style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n          data-measuring-cell-key={key}\n        />\n      ))}\n    </>\n  );\n}\n","import type { CalculatedColumn, Position, GroupRow, CellNavigationMode, Maybe } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.editor != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column,\n  isGroupRow\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'isGroupRow' | 'lastFrozenColumnIndex'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const minRowIdx = -1 - topSummaryRowsCount;\n  if (rowIdx === minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (topSummaryRows && rowIdx > minRowIdx && rowIdx <= topSummaryRowsCount + minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    }\n    return undefined;\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode !== 'NONE') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = nextRowIdx === maxRowIdx;\n        if (!isLastRow) {\n          nextIdx = 0;\n          nextRowIdx += 1;\n        }\n      } else {\n        nextIdx = 0;\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = nextRowIdx === minRowIdx;\n        if (!isFirstRow) {\n          nextRowIdx -= 1;\n          nextIdx = columnsCount - 1;\n        }\n      } else {\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  cellNavigationMode: CellNavigationMode;\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  cellNavigationMode,\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === maxColIdx;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === maxRowIdx;\n    const atFirstRow = rowIdx === minRowIdx;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style';\n\nexport function getRowStyle(rowIdx: number, height?: number): CSSProperties {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    } as unknown as CSSProperties;\n  }\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import type { CalculatedColumn } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, round, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useRef, useEffect, useCallback } from 'react';\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n","import { useCallback, useState } from 'react';\nimport { scrollIntoView } from '../utils';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingCellRef(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  const ref = useCallback((cell: HTMLDivElement | null) => {\n    if (cell === null) return;\n    scrollIntoView(cell);\n    if (cell.contains(document.activeElement)) return;\n    cell.focus({ preventScroll: true });\n  }, []);\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocused = isSelected && !isChildFocused;\n\n  return {\n    ref: isSelected ? ref : undefined,\n    tabIndex: isFocused ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { useMemo } from 'react';\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, Maybe, RowHeightArgs } from '../types';\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds: Maybe<ReadonlySet<unknown>>;\n  enableVirtualization: boolean;\n}\n\n// TODO: https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\n\nimport { useFocusRef } from './hooks';\nimport type { HeaderRendererProps } from './types';\nimport { useDefaultComponents } from './DataGridDefaultComponentsProvider';\n\nconst headerSortCell = css`\n  @layer rdg.SortableHeaderCell {\n    cursor: pointer;\n    display: flex;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function headerRenderer<R, SR>({\n  column,\n  sortDirection,\n  priority,\n  onSort,\n  isCellSelected\n}: HeaderRendererProps<R, SR>) {\n  if (!column.sortable) return <>{column.name}</>;\n\n  return (\n    <SortableHeaderCell\n      onSort={onSort}\n      sortDirection={sortDirection}\n      priority={priority}\n      isCellSelected={isCellSelected}\n    >\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  HeaderRendererProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'isCellSelected'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  isCellSelected\n}: SortableHeaderCellProps<R, SR>) {\n  const sortStatus = useDefaultComponents<R, SR>()!.sortStatus!;\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      ref={ref}\n      tabIndex={tabIndex}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{sortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport defaultHeaderRenderer from './headerRenderer';\nimport { getCellStyle, getCellClassname } from './utils';\nimport { useRovingCellRef } from './hooks';\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n\n    &::after {\n      content: '';\n      cursor: col-resize;\n      position: absolute;\n      inset-block-start: 0;\n      inset-inline-end: 0;\n      inset-block-end: 0;\n      inline-size: 10px;\n    }\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'allRowsSelected'\n  | 'onAllRowsSelectionChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderCellProps<R, SR>) {\n  const isRtl = direction === 'rtl';\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  const headerRenderer = column.headerRenderer ?? defaultHeaderRenderer;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right, left } = currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      // prevents text selection in Chrome, which fixes scrolling the grid while dragging, and fixes re-size on an autosized column\n      event.preventDefault();\n      const { right, left } = currentTarget.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, width);\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst === true && sortDirection === 'DESC') ||\n        (sortDescendingFirst !== true && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function onDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    const { right, left } = event.currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    onColumnResize(column, 'max-content');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell(0);\n    }\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      ref={ref}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onDoubleClick={column.resizable ? onDoubleClick : undefined}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {headerRenderer({\n        column,\n        sortDirection,\n        priority,\n        onSort,\n        allRowsSelected,\n        onAllRowsSelectionChange,\n        isCellSelected\n      })}\n    </div>\n  );\n}\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn, Direction } from './types';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { DataGridProps } from './DataGrid';\nimport { cell, cellFrozen, rowSelectedClassname } from './style';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'max-content') => void;\n  selectCell: (columnIdx: number) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    line-height: var(--rdg-header-row-height);\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 0 to show up above regular cells */\n      z-index: 1;\n      position: sticky;\n      inset-block-start: 0;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 2;\n    }\n  }\n`;\n\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n      style={getRowStyle(1)}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname, isCellEditable } from './utils';\nimport type { CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nconst cellCopied = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n\n    &.${cellCopied} {\n      background-color: #9999ff;\n    }\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  dragHandle,\n  onRowClick,\n  onRowDoubleClick,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  function selectCellWrapper(openEditor?: boolean | null) {\n    selectCell(row, column, openEditor);\n  }\n\n  function handleClick() {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(row, column);\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n    onRowDoubleClick?.(row, column);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isCellEditable(column, row) || undefined}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          {column.formatter({\n            column,\n            row,\n            isCellSelected,\n            onRowChange: handleRowChange\n          })}\n          {dragHandle}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { memo, forwardRef } from 'react';\nimport type { RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport { rowClassname, rowSelectedClassname } from './style';\nimport type { CalculatedColumn, RowRendererProps } from './types';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onRowClick,\n    onRowDoubleClick,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RowRendererProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nconst RowComponent = memo(forwardRef(Row)) as <R, SR>(\n  props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRowRenderer<R, SR>(key: React.Key, props: RowRendererProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\nimport { useRovingCellRef } from './hooks';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) &&\n        column.groupFormatter?.({\n          groupKey,\n          childRows,\n          column,\n          row,\n          isExpanded,\n          isCellSelected,\n          toggleGroup\n        })}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozenLast, rowClassname, rowSelectedClassname } from './style';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport type { CalculatedColumn, GroupRow, Omit } from './types';\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  row: GroupRow<R>;\n  gridRowStart: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectGroup: (rowIdx: number) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nconst groupRow = css`\n  @layer rdg.GroupedRow {\n    &:not([aria-selected='true']) {\n      background-color: var(--rdg-header-background-color);\n    }\n\n    > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n      border-inline-end: none;\n    }\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  gridRowStart,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          {\n            [rowSelectedClassname]: selectedCellIdx === -1\n          }\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ninterface SharedCellRendererProps<R, SR>\n  extends Pick<CellRendererProps<R, SR>, 'column' | 'colSpan' | 'isCellSelected'> {\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.summaryFormatter?.({ column, row, isCellSelected })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozen, rowClassname, rowSelectedClassname } from './style';\nimport { getColSpan, getRowStyle } from './utils';\nimport SummaryCell from './SummaryCell';\nimport type { CalculatedColumn, RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<\n  RowRendererProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  lastTopRowIdx: number | undefined;\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    line-height: var(--rdg-summary-row-height);\n\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 1;\n    }\n\n    > .${cellFrozen} {\n      z-index: 2;\n    }\n  }\n`;\n\nconst topSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-end: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nconst bottomSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-start: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nconst topSummaryRowClassname = `rdg-top-summary-row ${topSummaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  lastTopRowIdx,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  const isTop = lastTopRowIdx !== undefined;\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [topSummaryRowClassname]: isTop,\n          [topSummaryRowBorderClassname]: isTop && lastTopRowIdx === rowIdx,\n          [bottomSummaryRowBorderClassname]: !isTop && rowIdx === 0,\n          'rdg-bottom-summary-row': !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { getCellStyle, getCellClassname, onEditorNavigation } from './utils';\nimport type { CellRendererProps, EditorProps, Omit } from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<EditorProps<R, SR>, 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  closeEditor: () => void;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  onRowChange,\n  closeEditor\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (event.key === 'Escape') {\n      event.stopPropagation();\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      event.stopPropagation();\n      onClose(true);\n    } else {\n      const onNavigation = column.editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) {\n        event.stopPropagation();\n      }\n    }\n  }\n\n  function onClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      onRowChange(row, true);\n    } else {\n      closeEditor();\n    }\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.renderFormatter && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={onKeyDown}\n      onMouseDownCapture={commitOnOutsideClick ? cancelFrameRequest : undefined}\n    >\n      {column.editor != null && (\n        <>\n          {column.editor({\n            column,\n            row,\n            onRowChange,\n            onClose\n          })}\n          {column.editorOptions?.renderFormatter &&\n            column.formatter({ column, row, isCellSelected: true, onRowChange })}\n        </>\n      )}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    cursor: move;\n    position: absolute;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 8px;\n    block-size: 8px;\n    background-color: var(--rdg-selection-color);\n\n    &:hover {\n      inline-size: 16px;\n      block-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { css } from '@linaria/core';\nimport type { SortStatusProps, SortIconProps, SortPriorityProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function sortStatus({ sortDirection, priority }: SortStatusProps) {\n  return (\n    <>\n      {sortIcon({ sortDirection })}\n      {sortPriority({ priority })}\n    </>\n  );\n}\n\nexport function sortIcon({ sortDirection }: SortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function sortPriority({ priority }: SortPriorityProps) {\n  return priority;\n}\n","import { forwardRef, useState, useRef, useImperativeHandle, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  rootClassname,\n  viewportDraggingClassname,\n  focusSinkClassname,\n  rowSelected,\n  rowSelectedWithFrozenCell\n} from './style';\nimport {\n  useLayoutEffect,\n  useGridDimensions,\n  useCalculatedColumns,\n  useViewportColumns,\n  useViewportRows,\n  useLatestFunc,\n  RowSelectionChangeProvider\n} from './hooks';\nimport HeaderRow from './HeaderRow';\nimport { defaultRowRenderer } from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport EditCell from './EditCell';\nimport DragHandle from './DragHandle';\nimport { default as defaultSortStatus } from './sortStatus';\nimport { checkboxFormatter as defaultCheckboxFormatter } from './formatters';\nimport {\n  DataGridDefaultComponentsProvider,\n  useDefaultComponents\n} from './DataGridDefaultComponentsProvider';\nimport {\n  assertIsValidKeyGetter,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  getColSpan,\n  sign,\n  abs,\n  getSelectedCellColSpan,\n  renderMeasuringCells,\n  scrollIntoView\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Position,\n  RowsChangeData,\n  SelectRowEvent,\n  FillEvent,\n  CopyEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortColumn,\n  RowHeightArgs,\n  Maybe,\n  Renderers,\n  Direction\n} from './types';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'formatter' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable'\n>;\n\nconst initialPosition: SelectCellState = {\n  idx: -1,\n  rowIdx: -2,\n  mode: 'SELECT'\n};\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the top of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  groupBy?: Maybe<readonly string[]>;\n  rowGrouper?: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds?: Maybe<ReadonlySet<unknown>>;\n  onExpandedGroupIdsChange?: Maybe<(expandedGroupIds: Set<unknown>) => void>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onCopy?: Maybe<(event: CopyEvent<R>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Function called whenever a row is double clicked */\n  onRowDoubleClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default 'NONE' */\n  cellNavigationMode?: Maybe<CellNavigationMode>;\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  renderers?: Maybe<Renderers<R, SR>>;\n  rowClass?: Maybe<(row: R) => Maybe<string>>;\n  /** @default 'ltr' */\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  props: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Event props\n    onRowClick,\n    onRowDoubleClick,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    cellNavigationMode: rawCellNavigationMode,\n    enableVirtualization: rawEnableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction: rawDirection,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  } = props;\n\n  /**\n   * defaults\n   */\n  const defaultComponents = useDefaultComponents<R, SR>();\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const rowRenderer =\n    renderers?.rowRenderer ?? defaultComponents?.rowRenderer ?? defaultRowRenderer;\n  const sortStatus = renderers?.sortStatus ?? defaultComponents?.sortStatus ?? defaultSortStatus;\n  const checkboxFormatter =\n    renderers?.checkboxFormatter ??\n    defaultComponents?.checkboxFormatter ??\n    defaultCheckboxFormatter;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultComponents?.noRowsFallback;\n  const cellNavigationMode = rawCellNavigationMode ?? 'NONE';\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState((): ReadonlyMap<string, number> => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>(\n    initialPosition\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const rowRef = useRef<HTMLDivElement>(null);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight, isWidthInitialized] = useGridDimensions();\n  const headerRowsCount = 1;\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      sortStatus,\n      checkboxFormatter\n    }),\n    [sortStatus, checkboxFormatter]\n  );\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const { viewportColumns, flexWidthViewportColumns } = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    columnWidths,\n    isGroupRow\n  });\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const minRowIdx = -1 - topSummaryRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onRowClickLatest = useLatestFunc(onRowClick);\n  const onRowDoubleClickLatest = useLatestFunc(onRowDoubleClick);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const selectAllRowsLatest = useLatestFunc(selectAllRows);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectViewportCellLatest = useLatestFunc(\n    (row: R, column: CalculatedColumn<R, SR>, enableEditor: Maybe<boolean>) => {\n      const rowIdx = rows.indexOf(row);\n      selectCell({ rowIdx, idx: column.idx }, enableEditor);\n    }\n  );\n  const selectGroupLatest = useLatestFunc((rowIdx: number) => {\n    selectCell({ rowIdx, idx: -1 });\n  });\n  const selectHeaderCellLatest = useLatestFunc((idx: number) => {\n    selectCell({ rowIdx: minRowIdx, idx });\n  });\n  const selectTopSummaryCellLatest = useLatestFunc(\n    (summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n      const rowIdx = topSummaryRows!.indexOf(summaryRow);\n      selectCell({ rowIdx: rowIdx + minRowIdx + 1, idx: column.idx });\n    }\n  );\n  const selectBottomSummaryCellLatest = useLatestFunc(\n    (summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n      const rowIdx = bottomSummaryRows!.indexOf(summaryRow) + rows.length;\n      selectCell({ rowIdx, idx: column.idx });\n    }\n  );\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n\n    if (selectedPosition.idx === -1) {\n      rowRef.current!.focus({ preventScroll: true });\n      scrollIntoView(rowRef.current);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (!isWidthInitialized || flexWidthViewportColumns.length === 0) return;\n\n    setColumnWidths((columnWidths) => {\n      const newColumnWidths = new Map(columnWidths);\n      const grid = gridRef.current!;\n\n      for (const column of flexWidthViewportColumns) {\n        const measuringCell = grid.querySelector(`[data-measuring-cell-key=\"${column.key}\"]`)!;\n        // Set the actual width of the column after it is rendered\n        const { width } = measuringCell.getBoundingClientRect();\n        newColumnWidths.set(column.key, width);\n      }\n\n      return newColumnWidths;\n    });\n  }, [isWidthInitialized, flexWidthViewportColumns, gridRef]);\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn,\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: getRowTop(rowIdx),\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function handleColumnResize(column: CalculatedColumn<R, SR>, width: number | 'max-content') {\n    const { style } = gridRef.current!;\n    const newTemplateColumns = [...templateColumns];\n    newTemplateColumns[column.idx] = width === 'max-content' ? width : `${width}px`;\n    style.gridTemplateColumns = newTemplateColumns.join(' ');\n\n    const measuringCell = gridRef.current!.querySelector(\n      `[data-measuring-cell-key=\"${column.key}\"]`\n    )!;\n    const measuredWidth = measuringCell.getBoundingClientRect().width;\n    const measuredWidthPx = `${measuredWidth}px`;\n\n    // Immediately update `grid-template-columns` to prevent the column from jumping to its min/max allowed width.\n    // Only measuring cells have the min/max width set for proper colSpan support,\n    // which is why other cells may render at the previously set width, beyond the min/max.\n    // An alternative for the above would be to use flushSync.\n    // We also have to reset `max-content` so it doesn't remain stuck on `max-content`.\n    if (newTemplateColumns[column.idx] !== measuredWidthPx) {\n      newTemplateColumns[column.idx] = measuredWidthPx;\n      style.gridTemplateColumns = newTemplateColumns.join(' ');\n    }\n\n    if (columnWidths.get(column.key) === measuredWidth) return;\n\n    const newColumnWidths = new Map(columnWidths);\n    newColumnWidths.set(column.key, measuredWidth);\n    setColumnWidths(newColumnWidths);\n\n    onColumnResize?.(column.idx, measuredWidth);\n  }\n\n  function selectRow({ row, checked, isShiftClick }: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked: boolean) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = hasGroups && event.target === rowRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { key, keyCode } = event;\n    const { rowIdx } = selectedPosition;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event) &&\n      !isGroupRow(rows[rowIdx]) &&\n      selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n\n      if (\n        isGroupRow(row) &&\n        selectedPosition.idx === -1 &&\n        // Collapse the current group row if it is focused and is in expanded state\n        ((key === leftKey && row.isExpanded) ||\n          // Expand the current group row if it is focused and is in collapsed state\n          (key === rightKey && !row.isExpanded))\n      ) {\n        event.preventDefault(); // Prevents scrolling\n        toggleGroup(row.id);\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[getRawRowIdx(rowIdx)];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    const column = columns[selectedPosition.idx];\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (isSamePosition(selectedPosition, position)) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(gridRef.current?.querySelector('[tabindex=\"0\"]'));\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n  }\n\n  function scrollToColumn(idx: number): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (idx > lastFrozenColumnIndex) {\n      const { rowIdx } = selectedPosition;\n      if (!isCellWithinSelectionBounds({ rowIdx, idx })) return;\n      const { clientWidth } = current;\n      const column = columns[idx];\n      const { left, width } = columnMetrics.get(column)!;\n      let right = left + width;\n\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan !== undefined) {\n        const { left, width } = columnMetrics.get(columns[column.idx + colSpan - 1])!;\n        right = left + width;\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\n      const sign = isRtl ? -1 : 1;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = (left - totalFrozenColumnWidth) * sign;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = (right - clientWidth) * sign;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (key === leftKey && isRowSelected && isGroupRow(row) && !row.isExpanded && row.level !== 0) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          cellNavigationMode,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE' ? 'CHANGE_ROW' : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode: mode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getLayoutCssVars() {\n    if (flexWidthViewportColumns.length === 0) return layoutCssVars;\n    const newTemplateColumns = [...templateColumns];\n    for (const column of flexWidthViewportColumns) {\n      newTemplateColumns[column.idx] = column.width as string;\n    }\n\n    return {\n      ...layoutCssVars,\n      gridTemplateColumns: newTemplateColumns.join(' ')\n    };\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (\n      selectedPosition.rowIdx !== rowIdx ||\n      selectedPosition.mode === 'EDIT' ||\n      hasGroups || // drag fill is not supported when grouping is enabled\n      onFill == null\n    ) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rawRows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = () => {\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges?: boolean) => {\n      if (commitChanges) {\n        updateRow(column, selectedPosition.rowIdx, row);\n        closeEditor();\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor();\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    const selectedColumn = columns[selectedPosition.idx];\n    if (\n      // idx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n    let startRowIndex = 0;\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      // selectedIdx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerRowsCount + topSummaryRowsCount + rowIdx + 1;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        const isGroupRowSelected =\n          isSelectable && row.childRows.every((cr) => selectedRows.has(rowKeyGetter!(cr)));\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + topSummaryRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={rowColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            row={row}\n            gridRowStart={gridRowStart}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n            isRowSelected={isGroupRowSelected}\n            selectGroup={selectGroupLatest}\n            toggleGroup={toggleGroupLatest}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(\n        rowRenderer(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex':\n            headerRowsCount + topSummaryRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelected,\n          onRowClick: onRowClickLatest,\n          onRowDoubleClick: onRowDoubleClickLatest,\n          rowClass,\n          gridRowStart,\n          height: getRowHeight(rowIdx),\n          copiedCellIdx:\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined,\n\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectViewportCellLatest,\n          selectedCellDragHandle: getDragHandle(rowIdx),\n          selectedCellEditor: getCellEditor(rowIdx)\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition(initialPosition);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `${headerRowHeight}px`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused = selectedPosition.idx === -1 && selectedPosition.rowIdx !== -2;\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            selectedPosition.rowIdx >= 0 && selectedPosition.rowIdx < rows.length\n              ? `${headerRowHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-summary-row-height': `${summaryRowHeight}px`,\n          '--rdg-sign': isRtl ? -1 : 1,\n          ...getLayoutCssVars()\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      {/* extra div is needed for row navigation in a treegrid */}\n      {hasGroups && (\n        <div\n          ref={rowRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + 2\n          }}\n          onKeyDown={handleKeyDown}\n        />\n      )}\n      <DataGridDefaultComponentsProvider value={defaultGridComponents}>\n        <HeaderRow\n          columns={getRowViewportColumns(-1)}\n          onColumnResize={handleColumnResizeLatest}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={selectAllRowsLatest}\n          sortColumns={sortColumns}\n          onSortColumnsChange={onSortColumnsChangeLatest}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          selectedCellIdx={selectedPosition.rowIdx === minRowIdx ? selectedPosition.idx : undefined}\n          selectCell={selectHeaderCellLatest}\n          shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n          direction={direction}\n        />\n        {rows.length === 0 && noRowsFallback ? (\n          noRowsFallback\n        ) : (\n          <>\n            {topSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + rowIdx + 1;\n              const summaryRowIdx = rowIdx + minRowIdx + 1;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top = headerRowHeight + summaryRowHeight * rowIdx;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={gridRowStart}\n                  key={rowIdx}\n                  rowIdx={rowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={undefined}\n                  lastTopRowIdx={topSummaryRowsCount - 1}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  selectCell={selectTopSummaryCellLatest}\n                />\n              );\n            })}\n            <RowSelectionChangeProvider value={selectRowLatest}>\n              {getViewportRows()}\n            </RowSelectionChangeProvider>\n            {bottomSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + topSummaryRowsCount + rows.length + rowIdx + 1;\n              const summaryRowIdx = rows.length + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top =\n                clientHeight > totalRowHeight\n                  ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                  : undefined;\n              const bottom =\n                top === undefined\n                  ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                  : undefined;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={headerRowsCount + topSummaryRowsCount + rowsCount + rowIdx + 1}\n                  key={rowIdx}\n                  rowIdx={rowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={bottom}\n                  lastTopRowIdx={undefined}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  selectCell={selectBottomSummaryCellLatest}\n                />\n              );\n            })}\n          </>\n        )}\n\n        {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n        {renderMeasuringCells(viewportColumns)}\n      </DataGridDefaultComponentsProvider>\n    </div>\n  );\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions(): [\n  ref: React.RefObject<HTMLDivElement>,\n  width: number,\n  height: number,\n  isWidthInitialized: boolean\n] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n  const [isWidthInitialized, setWidthInitialized] = useState(false);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jest/jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - offsetHeight + clientHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n    setWidthInitialized(true);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      setInlineSize(size.inlineSize);\n      setBlockSize(size.blockSize);\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize, isWidthInitialized];\n}\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column, Maybe } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { valueFormatter, toggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport { clampColumnWidth, max, min } from '../utils';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 80;\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy: Maybe<readonly string[]>;\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? valueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n    groupBy: readonly string[];\n  } => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        width: rawColumn.width ?? defaultWidth,\n        minWidth: rawColumn.minWidth ?? defaultMinWidth,\n        maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ??= toggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultFormatter,\n    defaultResizable,\n    defaultSortable,\n    rawGroupBy\n  ]);\n\n  const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n\n    for (const column of columns) {\n      let width = columnWidths.get(column.key) ?? column.width;\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {\n      gridTemplateColumns: templateColumns.join(' ')\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [columnWidths, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  columnWidths: ReadonlyMap<string, number>;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  columnWidths,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n  const { viewportColumns, flexWidthViewportColumns } = useMemo((): {\n    viewportColumns: readonly CalculatedColumn<R, SR>[];\n    flexWidthViewportColumns: readonly CalculatedColumn<R, SR>[];\n  } => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    const flexWidthViewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n      if (typeof column.width === 'string') {\n        flexWidthViewportColumns.push(column);\n      }\n    }\n\n    return { viewportColumns, flexWidthViewportColumns };\n  }, [startIdx, colOverscanEndIdx, columns]);\n\n  const unsizedFlexWidthViewportColumns = useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    return flexWidthViewportColumns.filter((column) => !columnWidths.has(column.key));\n  }, [flexWidthViewportColumns, columnWidths]);\n\n  return {\n    viewportColumns,\n    flexWidthViewportColumns: unsizedFlexWidthViewportColumns\n  };\n}\n","import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditorInternalClassname = css`\n  @layer rdg.TextEditor {\n    appearance: none;\n\n    box-sizing: border-box;\n    inline-size: 100%;\n    block-size: 100%;\n    padding-block: 0;\n    padding-inline: 6px;\n    border: 2px solid #ccc;\n    vertical-align: top;\n    color: var(--rdg-color);\n    background-color: var(--rdg-background-color);\n\n    font-family: inherit;\n    font-size: var(--rdg-font-size);\n\n    &:focus {\n      border-color: var(--rdg-selection-color);\n      outline: none;\n    }\n\n    &::placeholder {\n      color: #999;\n      opacity: 1;\n    }\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function textEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n"],"names":["r","e","t","f","n","Array","isArray","length","arguments","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","source","forEach","getOwnPropertyDescriptors","defineProperties","_objectWithoutProperties","excluded","sourceKeys","indexOf","sourceSymbolKeys","prototype","propertyIsEnumerable","call","cellClassname","cellFrozenClassname","cellFrozenLastClassname","rootClassname","viewportDraggingClassname","rowClassname","rowSelectedClassname","checkboxLabelClassname","checkboxInputClassname","checkboxClassname","checkboxLabelDisabledClassname","checkboxFormatter","ref","onChange","props","_jsxs","className","clsx","disabled","children","type","checked","nativeEvent","shiftKey","_jsx","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","useFocusRef","isSelected","useRef","current","focus","preventScroll","tabIndex","DataGridDefaultComponentsContext","createContext","undefined","DataGridDefaultComponentsProvider","Provider","useDefaultComponents","useContext","valueFormatter","row","column","groupCellContentClassname","caretClassname","toggleGroupFormatter","ToggleGroup","groupKey","isExpanded","isCellSelected","toggleGroup","d","onKeyDown","viewBox","width","height","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","SELECT_COLUMN_KEY","getColSpan","lastFrozenColumnIndex","args","colSpan","Number","isInteger","frozen","idx","scrollIntoView","element","inline","block","nonInputKeys","Set","isCtrlKeyHeldDown","ctrlKey","metaKey","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","renderMeasuringCells","viewportColumns","map","minWidth","maxWidth","style","gridColumnStart","isSelectedCellEditable","selectedPosition","columns","rows","isGroupRow","rowIdx","isCellEditable","editor","rowGroup","editable","getSelectedCellColSpan","topSummaryRows","bottomSummaryRows","topSummaryRowsCount","minRowIdx","getRowStyle","getCellStyle","gridColumnEnd","insetInlineStart","getCellClassname","extraClasses","isLastFrozenColumn","min","Math","max","floor","round","sign","abs","assertIsValidKeyGetter","keyGetter","Error","clampColumnWidth","useLatestFunc","fn","callbackFn","useCallback","useRovingCellRef","useState","isChildFocused","setIsChildFocused","cell","contains","document","activeElement","onFocus","event","currentTarget","useViewportRows","rawRows","rowHeight","clientHeight","scrollTop","groupBy","rowGrouper","expandedGroupIds","enableVirtualization","useMemo","groupRows","startRowIndex","groupByKey","remainingGroupByKeys","groupRowsCount","groups","entries","childRows","childGroups","childRowsCount","groupedRows","rowsCount","allGroupRows","flattenedRows","expandGroup","parentId","level","arr","posInSet","id","has","groupRow","setSize","add","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","rowOverscanStartIdx","rowOverscanEndIdx","rowVisibleStartIdx","rowVisibleEndIdx","headerSortCellClassname","headerSortNameClassname","headerRenderer","sortDirection","priority","onSort","sortable","SortableHeaderCell","name","sortStatus","onClick","preventDefault","cellResizableClassname","HeaderCell","onColumnResize","allRowsSelected","onAllRowsSelectionChange","sortColumns","onSortColumnsChange","selectCell","shouldFocusGrid","isRtl","direction","sortIndex","findIndex","sort","columnKey","sortColumn","ariaSort","headerCellClass","resizable","defaultHeaderRenderer","role","onDoubleClick","getBoundingClientRect","right","left","clientX","onPointerDown","pointerType","buttons","pointerId","setPointerCapture","addEventListener","onPointerMove","onLostPointerCapture","removeEventListener","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","headerRowClassname","HeaderRow","selectedCellIdx","cells","index","memo","cellCopiedClassname","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","dragHandle","onRowClick","onRowDoubleClick","onRowChange","cellClass","selectCellWrapper","openEditor","editorOptions","editOnClick","onContextMenu","formatter","newRow","Row","gridRowStart","isRowSelected","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","selectedCellDragHandle","rowClass","setDraggedOverRowIdx","onMouseEnter","handleRowChange","RowComponent","forwardRef","defaultRowRenderer","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","groupFormatter","groupRowClassname","GroupedRow","selectGroup","SummaryCell","summaryCellClass","summaryFormatter","summaryRowClassname","topSummaryRowClassname","SummaryRow","bottom","lastTopRowIdx","ariaRowIndex","isTop","EditCell","closeEditor","frameRequestRef","commitOnOutsideClick","commitOnOutsideMouseDown","onClose","cancelFrameRequest","cancelAnimationFrame","commitChanges","onWindowCaptureMouseDown","capture","requestAnimationFrame","renderFormatter","stopPropagation","onNavigation","onMouseDownCapture","cellDragHandleClassname","DragHandle","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","updateRows","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","targetRow","onMouseDown","onMouseOver","onMouseUp","overRowIdx","handleDragEnd","arrowClassname","sortIcon","sortPriority","initialPosition","mode","DataGrid","rawColumns","rowKeyGetter","rawRowHeight","rawHeaderRowHeight","headerRowHeight","rawSummaryRowHeight","summaryRowHeight","selectedRows","onSelectedRowsChange","defaultColumnOptions","rawGroupBy","onExpandedGroupIdsChange","onScroll","onCopy","onPaste","rawCellNavigationMode","cellNavigationMode","rawEnableVirtualization","renderers","rawDirection","ariaLabel","ariaLabelledBy","ariaDescribedBy","testId","defaultComponents","rowRenderer","defaultSortStatus","defaultCheckboxFormatter","noRowsFallback","setScrollTop","scrollLeft","setScrollLeft","Map","columnWidths","setColumnWidths","setSelectedPosition","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","prevSelectedPosition","lastSelectedRowIdx","rowRef","gridRef","inlineSize","setInlineSize","blockSize","setBlockSize","isWidthInitialized","setWidthInitialized","ResizeObserver","clientWidth","offsetWidth","offsetHeight","initialHeight","resizeObserver","size","contentBoxSize","observe","disconnect","useGridDimensions","gridWidth","gridHeight","bottomSummaryRowsCount","summaryRowsCount","isSelectable","leftKey","rightKey","defaultGridComponents","every","viewportWidth","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultFormatter","defaultSortable","defaultResizable","rawColumn","includes","aKey","frozenA","bKey","frozenB","colSpanColumns","columnMetrics","totalFrozenColumnWidth","templateColumns","get","set","columnMetric","layoutCssVars","gridTemplateColumns","join","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","colOverscanStartIdx","colOverscanEndIdx","useCalculatedColumns","startIdx","updateStartIdx","colIdx","flexWidthViewportColumns","useViewportColumns","hasGroups","minColIdx","maxColIdx","maxRowIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","handleColumnResizeLatest","newTemplateColumns","measuredWidth","querySelector","measuredWidthPx","newColumnWidths","onSortColumnsChangeLatest","onRowClickLatest","onRowDoubleClickLatest","selectRowLatest","selectRow","selectAllRowsLatest","newSelectedRows","rowKey","delete","handleFormatterRowChangeLatest","updateRow","selectViewportCellLatest","enableEditor","selectGroupLatest","selectHeaderCellLatest","selectTopSummaryCellLatest","summaryRow","selectBottomSummaryCellLatest","toggleGroupLatest","isSamePosition","grid","useImperativeHandle","scrollToColumn","scrollToRow","scrollTo","behavior","isShiftClick","childRow","previousRowIdx","step","expandedGroupId","newExpandedGroupIds","handleKeyDown","Element","isCellEvent","closest","isRowEvent","keyCode","getRawRowIdx","sourceColumnKey","handleCopy","targetColumn","updatedTargetRow","targetColumnKey","handlePaste","isRowIdxWithinViewportBounds","canExitGrid","commitEditorChanges","nextPosition","parentRowIdx","parentRow","nextRowY","getNextPosition","currentIdx","currentPosition","isCellWithinBounds","nextIdx","nextRowIdx","setColSpan","moveRight","columnsCount","isBeforeFirstColumn","getNextSelectedCellPosition","navigate","onCellKeyDown","isDefaultPrevented","isDefaultCellInput","originalRow","handleCellInput","rawRowIdx","isColIdxWithinSelectionBounds","isCellAtRightBoundary","getDraggedOverCellIdx","currentRowIdx","getDragHandle","getCellEditor","getRowViewportColumns","selectedColumn","slice","templateRows","isGroupRowFocused","scrollPaddingInlineStart","scrollPaddingBlock","getLayoutCssVars","dir","flushSync","summaryRowIdx","isSummaryRowSelected","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","isGroupRowSelected","cr","GroupRowRenderer","c","getViewportRows","p1","p2"],"sourceRoot":""}